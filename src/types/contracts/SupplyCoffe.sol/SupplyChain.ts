/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface SupplyChainInterface extends utils.Interface {
  functions: {
    "Brasil()": FunctionFragment;
    "CofeToken()": FunctionFragment;
    "PagarRecompensa(address)": FunctionFragment;
    "ReceberFinal(address)": FunctionFragment;
    "Safras(address)": FunctionFragment;
    "autorizados(address)": FunctionFragment;
    "autorizarEndereco(address)": FunctionFragment;
    "buy10tokenCofe()": FunctionFragment;
    "enviarFundos()": FunctionFragment;
    "getCofetokenBalance()": FunctionFragment;
    "inserirPrazoFinal(uint256)": FunctionFragment;
    "maisUmaSemanaPrazo()": FunctionFragment;
    "myCofetokenBalance()": FunctionFragment;
    "pag1Tramite(address)": FunctionFragment;
    "pag2Tramite(address)": FunctionFragment;
    "pag3TramiteFinal(address,uint256)": FunctionFragment;
    "registrarSafra(address,string,uint256,uint256)": FunctionFragment;
    "retirarEndereco(address)": FunctionFragment;
    "saldocontrato()": FunctionFragment;
    "setbrasil(address)": FunctionFragment;
    "somarRecompensas(address)": FunctionFragment;
    "timeinit()": FunctionFragment;
    "totalSafras()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Brasil"
      | "CofeToken"
      | "PagarRecompensa"
      | "ReceberFinal"
      | "Safras"
      | "autorizados"
      | "autorizarEndereco"
      | "buy10tokenCofe"
      | "enviarFundos"
      | "getCofetokenBalance"
      | "inserirPrazoFinal"
      | "maisUmaSemanaPrazo"
      | "myCofetokenBalance"
      | "pag1Tramite"
      | "pag2Tramite"
      | "pag3TramiteFinal"
      | "registrarSafra"
      | "retirarEndereco"
      | "saldocontrato"
      | "setbrasil"
      | "somarRecompensas"
      | "timeinit"
      | "totalSafras"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Brasil", values?: undefined): string;
  encodeFunctionData(functionFragment: "CofeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PagarRecompensa",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ReceberFinal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "Safras",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "autorizados",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "autorizarEndereco",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy10tokenCofe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enviarFundos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCofetokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inserirPrazoFinal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maisUmaSemanaPrazo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myCofetokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pag1Tramite",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pag2Tramite",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pag3TramiteFinal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registrarSafra",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retirarEndereco",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saldocontrato",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setbrasil",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "somarRecompensas",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "timeinit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSafras",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Brasil", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CofeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PagarRecompensa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ReceberFinal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Safras", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autorizados",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autorizarEndereco",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buy10tokenCofe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enviarFundos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCofetokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inserirPrazoFinal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maisUmaSemanaPrazo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myCofetokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pag1Tramite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pag2Tramite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pag3TramiteFinal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrarSafra",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retirarEndereco",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saldocontrato",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setbrasil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "somarRecompensas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeinit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSafras",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SupplyChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SupplyChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Brasil(overrides?: CallOverrides): Promise<[string]>;

    CofeToken(overrides?: CallOverrides): Promise<[string]>;

    PagarRecompensa(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ReceberFinal(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Safras(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        descricao: string;
        id: BigNumber;
        vendedor: string;
        pago: boolean;
      }
    >;

    autorizados(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    autorizarEndereco(
      cadastrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy10tokenCofe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enviarFundos(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCofetokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    inserirPrazoFinal(
      _prazofinal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maisUmaSemanaPrazo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    myCofetokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    pag1Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pag2Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pag3TramiteFinal(
      enderecoSafra: PromiseOrValue<string>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrarSafra(
      enderecoSafra: PromiseOrValue<string>,
      _descricao: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retirarEndereco(
      desautorizar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saldocontrato(overrides?: CallOverrides): Promise<[BigNumber]>;

    setbrasil(
      _Brasil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    somarRecompensas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timeinit(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSafras(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Brasil(overrides?: CallOverrides): Promise<string>;

  CofeToken(overrides?: CallOverrides): Promise<string>;

  PagarRecompensa(
    enderecoSafra: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ReceberFinal(
    enderecoSafra: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Safras(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      descricao: string;
      id: BigNumber;
      vendedor: string;
      pago: boolean;
    }
  >;

  autorizados(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  autorizarEndereco(
    cadastrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy10tokenCofe(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enviarFundos(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  inserirPrazoFinal(
    _prazofinal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maisUmaSemanaPrazo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  myCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  pag1Tramite(
    enderecoSafra: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pag2Tramite(
    enderecoSafra: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pag3TramiteFinal(
    enderecoSafra: PromiseOrValue<string>,
    _tokenCofe: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrarSafra(
    enderecoSafra: PromiseOrValue<string>,
    _descricao: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _tokenCofe: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retirarEndereco(
    desautorizar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saldocontrato(overrides?: CallOverrides): Promise<BigNumber>;

  setbrasil(
    _Brasil: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  somarRecompensas(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timeinit(overrides?: CallOverrides): Promise<BigNumber>;

  totalSafras(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Brasil(overrides?: CallOverrides): Promise<string>;

    CofeToken(overrides?: CallOverrides): Promise<string>;

    PagarRecompensa(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ReceberFinal(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    Safras(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        descricao: string;
        id: BigNumber;
        vendedor: string;
        pago: boolean;
      }
    >;

    autorizados(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    autorizarEndereco(
      cadastrar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy10tokenCofe(overrides?: CallOverrides): Promise<void>;

    enviarFundos(overrides?: CallOverrides): Promise<BigNumber>;

    getCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    inserirPrazoFinal(
      _prazofinal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maisUmaSemanaPrazo(overrides?: CallOverrides): Promise<void>;

    myCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pag1Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pag2Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pag3TramiteFinal(
      enderecoSafra: PromiseOrValue<string>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registrarSafra(
      enderecoSafra: PromiseOrValue<string>,
      _descricao: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    retirarEndereco(
      desautorizar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    saldocontrato(overrides?: CallOverrides): Promise<BigNumber>;

    setbrasil(
      _Brasil: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    somarRecompensas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeinit(overrides?: CallOverrides): Promise<BigNumber>;

    totalSafras(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    Brasil(overrides?: CallOverrides): Promise<BigNumber>;

    CofeToken(overrides?: CallOverrides): Promise<BigNumber>;

    PagarRecompensa(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ReceberFinal(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Safras(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autorizados(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autorizarEndereco(
      cadastrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy10tokenCofe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enviarFundos(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    inserirPrazoFinal(
      _prazofinal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maisUmaSemanaPrazo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    myCofetokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pag1Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pag2Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pag3TramiteFinal(
      enderecoSafra: PromiseOrValue<string>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrarSafra(
      enderecoSafra: PromiseOrValue<string>,
      _descricao: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retirarEndereco(
      desautorizar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saldocontrato(overrides?: CallOverrides): Promise<BigNumber>;

    setbrasil(
      _Brasil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    somarRecompensas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeinit(overrides?: CallOverrides): Promise<BigNumber>;

    totalSafras(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Brasil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CofeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PagarRecompensa(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ReceberFinal(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Safras(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autorizados(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autorizarEndereco(
      cadastrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy10tokenCofe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enviarFundos(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCofetokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inserirPrazoFinal(
      _prazofinal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maisUmaSemanaPrazo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    myCofetokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pag1Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pag2Tramite(
      enderecoSafra: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pag3TramiteFinal(
      enderecoSafra: PromiseOrValue<string>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrarSafra(
      enderecoSafra: PromiseOrValue<string>,
      _descricao: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _tokenCofe: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retirarEndereco(
      desautorizar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saldocontrato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setbrasil(
      _Brasil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    somarRecompensas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeinit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSafras(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
